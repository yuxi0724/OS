設計理念：
利用while讓每個thread可以確實地將該施打的針數施打完畢。
利用bool來儲存椅子上有沒有人或是表示這個人是否正坐在椅子上。
利用rand來設置亂碼。
利用time來取得當前的時間。

操作方式：
1.輸入學生數及亂數種子，需在範圍內，否則需重新輸入。
2.等待他們打完便會輸入皆已施打完畢。

void main:
在一開始使用者輸入學生數及亂數種子，若輸入的值不在限制範圍內則會重新輸入。
利用srand及rand來取得需要亂數處理的時間(如：等待時間)。
利用pthread及另設的struct來create每個thread。
mutex是放置於全域變數的位置，以便每個thread使用。
利用time及location來取得當前時間輸出。
利用for迴圈將所有的thread以join的方式結束。
最後直接輸出當前時間及學生已施打完畢。


void* injection:
利用student* s=(student *)S來取得資料。
(struct name*) (取得資料的變數)=((struct name*))(create時給予的資料);
使用while迴圈確保該學生施打完3劑，若施打完才可離開。
判斷struct裡頭的count及sitting來得知是否是第一次施打，若第一次施打則依照亂數計算出來的值((%2+1)*5)來進行sleep的等待。
利用全域變數int矩陣來記錄先後順序。
利用mutex將施打中的學生鎖起來，避免其他thread搶佔，施打完便解鎖。
若判斷無人等待便可直接進入施打，若有人在施打則會看使是否有椅子可坐，若沒有則會離開(也一樣使用亂數得出的值計算)。


bool SIT_empty:
判斷所有的座位是否為空的，若有一張有人坐回傳false，若皆無則回傳true。
